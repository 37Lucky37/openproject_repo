pipeline {
    agent { label 'agent-build' } 

    environment {
        REPO = "git@github.com:37Lucky37/openproject_repo.git"
        BRANCH = "develop"
        CREDENTIALS_ID = "jenkins-openproject-cred"
        WORKSPACE_DIR = "${env.HOME}/openproject"
        RELEASE_BRANCH_PREFIX = "release"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    sh '''
                        echo "üõ† –û—á–∏—â–∞—î–º–æ —Ä–æ–±–æ—á—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é..."
                        rm -rf ${WORKSPACE_DIR}
                        mkdir -p ${WORKSPACE_DIR}
                    '''
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${BRANCH}"]],
                        userRemoteConfigs: [[
                            url: REPO,
                            credentialsId: CREDENTIALS_ID
                        ]],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: WORKSPACE_DIR]]
                    ])
                }
            }
        }

        stage('Create Release Branch') {
            steps {
                script {
                    sh '''
                        echo "üîÄ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ä–µ–ª—ñ–∑–Ω—É –≥—ñ–ª–∫—É..."
                        cd ${WORKSPACE_DIR}

                        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–µ–≥ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
                        LAST_TAG=$(git fetch --tags && git tag --sort=-v:refname | head -n 1)
                        if [ -z "$LAST_TAG" ]; then
                            LAST_TAG="1.0.0"
                        fi
                        echo "–û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–µ–≥: $LAST_TAG"

                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ–≥—É (X.Y.Z)
                        if echo "$LAST_TAG" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
                            MAJOR=$(echo "$LAST_TAG" | cut -d. -f1)
                            MINOR=$(echo "$LAST_TAG" | cut -d. -f2)
                            PATCH=$(echo "$LAST_TAG" | cut -d. -f3)
                        else
                            echo "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥—É: $LAST_TAG"
                            exit 1
                        fi

                        # –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ PATCH-–≤–µ—Ä—Å—ñ—é (1.0.0 ‚Üí 1.0.1)
                        NEW_PATCH=$((PATCH + 1))
                        NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
                        echo "–ù–æ–≤–∏–π —Ç–µ–≥: $NEW_TAG"

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—ñ–ª–∫—É —Ä–µ–ª—ñ–∑—É
                        RELEASE_BRANCH="${RELEASE_BRANCH_PREFIX}-v$NEW_TAG"
                        echo "–°—Ç–≤–æ—Ä—é—î–º–æ –≥—ñ–ª–∫—É: $RELEASE_BRANCH"

                        git checkout -b "$RELEASE_BRANCH"
                        git push origin "$RELEASE_BRANCH"

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–≥ —ñ –ø—É—à–∏–º–æ –π–æ–≥–æ
                        git tag "$NEW_TAG"
                        git push origin "$NEW_TAG"

                        echo "‚úÖ –ì—ñ–ª–∫–∞ $RELEASE_BRANCH —ñ —Ç–µ–≥ $NEW_TAG —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ!"
                    '''
                }
            }
        }
    }
}
