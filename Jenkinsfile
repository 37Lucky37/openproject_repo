pipeline {
    agent { label 'agent-build' } // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞ –∞–≥–µ–Ω—Ç—ñ

    environment {
        REPO = "git@github.com:37Lucky37/openproject_repo.git"
        BRANCH = "main"
        CREDENTIALS_ID = "jenkins-openproject-cred" // ID SSH-–∫–ª—é—á–∞ –∑ Jenkins Credentials
        WORKSPACE_DIR = "${HOME}/openproject" // –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è —Å—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
        NODE_VERSION = "20.18.3"
        RUBY_VERSION = "3.4.1"
        BUNDLER_VERSION = "2.6.3"
        RBENV_ROOT = "${HOME}/.rbenv"
        DB_TEST_NAME = "openproject_test_db"
        DB_TEST_USER = "openproject_test_user"
        DB_TEST_PASS = "testpassword"
        RELEASE_BRANCH_PREFIX = "release"
    }

    stages {  // ‚ùó –û–¥–∏–Ω –±–ª–æ–∫ stages
        

        stage('Upgrade Git') {
            steps {
                script {
                    sh """
                        echo '‚¨ÜÔ∏è –û–Ω–æ–≤–ª—é—î–º–æ Git...'
                        sudo add-apt-repository ppa:git-core/ppa -y
                        sudo apt update
                        sudo apt install -y git
                        git --version
                    """
                }
            }
        }

        
      
        stage('Prepare Workspace') {
            steps {
                script {
                    sh """
                        echo 'üõ†Ô∏è –û—á–∏—â–∞—î–º–æ —Ä–æ–±–æ—á—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é...'
                        rm -rf ${WORKSPACE_DIR}
                        mkdir -p ${WORKSPACE_DIR}
                    """
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${BRANCH}"]],
                        userRemoteConfigs: [[
                            url: REPO,
                            credentialsId: CREDENTIALS_ID
                        ]],
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${WORKSPACE_DIR}"]]
                    ])
                }
            }
        }
      

        stage('Create Release Branch') {
            steps {
                script {
                    sh """
                        echo 'üîÄ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ä–µ–ª—ñ–∑–Ω—É –≥—ñ–ª–∫—É...'
                        cd ${WORKSPACE_DIR}

                        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–µ–≥ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
                        LAST_TAG=\$(git fetch --tags && git tag --sort=-v:refname | head -n 1 || echo "1.0.0")
                        echo "–û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–µ–≥: \$LAST_TAG"

                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç—É —Ç–µ–≥—É (X.Y.Z)
                        if [[ "\$LAST_TAG" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then
                            IFS=. read -r MAJOR MINOR PATCH <<< "\$LAST_TAG"
                        else
                            echo "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥—É: \$LAST_TAG"
                            exit 1
                        fi

                        # –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ PATCH-–≤–µ—Ä—Å—ñ—é (1.0.0 ‚Üí 1.0.1)
                        NEW_PATCH=\$((PATCH + 1))
                        NEW_TAG="\$MAJOR.\$MINOR.\$NEW_PATCH"
                        echo "–ù–æ–≤–∏–π —Ç–µ–≥: \$NEW_TAG"

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—ñ–ª–∫—É —Ä–µ–ª—ñ–∑—É
                        RELEASE_BRANCH="${RELEASE_BRANCH_PREFIX}-v\$NEW_TAG"
                        echo "–°—Ç–≤–æ—Ä—é—î–º–æ –≥—ñ–ª–∫—É: \$RELEASE_BRANCH"

                        git checkout -b "\$RELEASE_BRANCH"
                        git push origin "\$RELEASE_BRANCH"

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–≥ —ñ –ø—É—à–∏–º–æ –π–æ–≥–æ
                        git tag "\$NEW_TAG"
                        git push origin "\$NEW_TAG"

                        echo "‚úÖ –ì—ñ–ª–∫–∞ \$RELEASE_BRANCH —ñ —Ç–µ–≥ \$NEW_TAG —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ!"
                    """
                }
            }
        }
      
        stage('Check Environment') {
            steps {
                script {
                    sh """
                        echo 'üñ•Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–∞ –∞–≥–µ–Ω—Ç—ñ:'
                        uname -a
                        whoami
                        pwd
                    """
                }
            }
        }
    } // ‚ùó –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —î–¥–∏–Ω–∏–π –±–ª–æ–∫ `stages`
} // ‚ùó –ó–∞–∫—Ä–∏–≤–∞—î–º–æ `pipeline`
